---
import { Code2, Palette, FileSpreadsheet, Package } from 'lucide-react';
---

<div class="pt-8 sm:pt-12 lg:pt-16 pb-12 sm:pb-16 lg:pb-20 px-4 sm:px-6 lg:px-8">
  <div class="max-w-7xl mx-auto">
    <!-- Header Section -->
    <div class="text-center mb-12 lg:mb-16">
      <h2 class="text-3xl sm:text-4xl lg:text-5xl font-black leading-tight font-outfit">
        <span class="bg-clip-text text-transparent" style="background: var(--excel-gradient); -webkit-background-clip: text;">
          Powerful
        </span> Features
      </h2>
      
      <p class="mt-4 sm:mt-6 text-lg sm:text-xl text-gray-600 dark:text-gray-400 max-w-3xl mx-auto">
        xldx provides a comprehensive set of features for creating Excel files with advanced styling,
        theming, and pattern-based formatting - all without dependencies.
      </p>
    </div>

    <!-- Feature Grid -->
    <div class="grid grid-cols-1 md:grid-cols-2 gap-6 lg:gap-8">
      <!-- Pattern-Based Styling -->
      <div class="bg-base-200 rounded-2xl p-6 lg:p-8">
        <div class="flex items-start space-x-4">
          <div class="flex-shrink-0 w-12 h-12 bg-primary bg-opacity-20 rounded-lg flex items-center justify-center">
            <Palette className="w-6 h-6 text-primary" />
          </div>
          <div>
            <h3 class="text-xl font-semibold mb-2">Pattern-Based Styling</h3>
            <p class="text-gray-600 dark:text-gray-400 mb-4">
              Apply styles dynamically based on cell data patterns. Create zebra stripes, 
              highlight differences, or color-code values automatically.
            </p>
            <pre class="bg-base-300 p-3 rounded-lg text-sm overflow-x-auto">
<code>createColumn({
  key: 'amount',
  patterns: {
    bgColorPattern: 'zebraBg',
    textPattern: 'colorPerDiff'
  }
})</code></pre>
          </div>
        </div>
      </div>

      <!-- TypeScript First -->
      <div class="bg-base-200 rounded-2xl p-6 lg:p-8">
        <div class="flex items-start space-x-4">
          <div class="flex-shrink-0 w-12 h-12 bg-secondary bg-opacity-20 rounded-lg flex items-center justify-center">
            <Code2 className="w-6 h-6 text-secondary" />
          </div>
          <div>
            <h3 class="text-xl font-semibold mb-2">TypeScript First</h3>
            <p class="text-gray-600 dark:text-gray-400 mb-4">
              Built with TypeScript for complete type safety. Get IntelliSense support
              and catch errors at compile time with comprehensive type definitions.
            </p>
            <pre class="bg-base-300 p-3 rounded-lg text-sm overflow-x-auto">
<code>const xldx = new Xldx(data);
xldx.createSheet(
  { name: 'Report' },
  ...columns
);</code></pre>
          </div>
        </div>
      </div>

      <!-- Multi-Sheet Support -->
      <div class="bg-base-200 rounded-2xl p-6 lg:p-8">
        <div class="flex items-start space-x-4">
          <div class="flex-shrink-0 w-12 h-12 bg-accent bg-opacity-20 rounded-lg flex items-center justify-center">
            <FileSpreadsheet className="w-6 h-6 text-accent" />
          </div>
          <div>
            <h3 class="text-xl font-semibold mb-2">Multi-Sheet Workbooks</h3>
            <p class="text-gray-600 dark:text-gray-400 mb-4">
              Create complex workbooks with multiple sheets. Each sheet can have its own
              data, columns, and styling configuration.
            </p>
            <pre class="bg-base-300 p-3 rounded-lg text-sm overflow-x-auto">
<code>xldx.createSheets([
  { options: sheet1, columns },
  { options: sheet2, columns }
]);</code></pre>
          </div>
        </div>
      </div>

      <!-- Zero Dependencies -->
      <div class="bg-base-200 rounded-2xl p-6 lg:p-8">
        <div class="flex items-start space-x-4">
          <div class="flex-shrink-0 w-12 h-12 bg-success bg-opacity-20 rounded-lg flex items-center justify-center">
            <Package className="w-6 h-6 text-success" />
          </div>
          <div>
            <h3 class="text-xl font-semibold mb-2">Zero Dependencies</h3>
            <p class="text-gray-600 dark:text-gray-400 mb-4">
              No runtime dependencies means smaller bundle size and fewer security concerns.
              Everything is implemented in pure TypeScript.
            </p>
            <div class="flex flex-wrap gap-2 mt-4">
              <span class="badge badge-primary">No ExcelJS</span>
              <span class="badge badge-primary">No SheetJS</span>
              <span class="badge badge-primary">Pure TS</span>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- API Preview -->
    <div class="bg-base-100 rounded-2xl border border-base-content/10 p-6 lg:p-8 mt-12">
      <h3 class="text-xl font-bold mb-6 font-outfit">Simple API</h3>
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div>
          <h4 class="font-semibold mb-3">Browser Usage</h4>
          <pre class="bg-base-300 p-4 rounded-lg text-sm overflow-x-auto">
<code>import { Xldx } from 'xldx/browser';

const xldx = new Xldx(data);
xldx.createSheet(options, ...columns);

// Download directly
await xldx.download('report.xlsx');

// Or get as Blob
const blob = await xldx.toBlob();</code></pre>
        </div>
        <div>
          <h4 class="font-semibold mb-3">Node.js Usage</h4>
          <pre class="bg-base-300 p-4 rounded-lg text-sm overflow-x-auto">
<code>import { Xldx } from 'xldx/server';

const xldx = new Xldx(data);
xldx.createSheet(options, ...columns);

// Write to file
await xldx.write('report.xlsx');

// Or get as Buffer
const buffer = await xldx.toBuffer();</code></pre>
        </div>
      </div>
    </div>
  </div>
</div>