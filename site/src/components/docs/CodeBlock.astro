---
export interface Props {
  code: string;
  lang?: string;
}

const { code, lang = 'javascript' } = Astro.props;

// Simple syntax highlighting function
function highlightCode(code: string): string {
  // Keywords
  code = code.replace(/\b(import|export|from|const|let|var|function|class|new|return|if|else|for|while|do|switch|case|break|continue|try|catch|finally|throw|async|await|typeof|instanceof|in|of|void|null|undefined|true|false)\b/g, '<span class="code-keyword">$1</span>');
  
  // Strings (single and double quotes)
  code = code.replace(/(["'])(?:(?=(\\?))\2.)*?\1/g, '<span class="code-string">$&</span>');
  
  // Comments
  code = code.replace(/(\/\/[^\n]*)/g, '<span class="code-comment">$1</span>');
  code = code.replace(/(\/\*[\s\S]*?\*\/)/g, '<span class="code-comment">$1</span>');
  
  // Numbers
  code = code.replace(/\b(\d+(\.\d+)?)\b/g, '<span class="code-number">$1</span>');
  
  // Functions and methods (word followed by parenthesis)
  code = code.replace(/\b([a-zA-Z_$][a-zA-Z0-9_$]*)\s*(?=\()/g, '<span class="code-function">$1</span>');
  
  // Properties (word followed by colon)
  code = code.replace(/\b([a-zA-Z_$][a-zA-Z0-9_$]*)\s*(?=:)/g, '<span class="code-property">$1</span>');
  
  // Punctuation
  code = code.replace(/([{}[\]().,;:])/g, '<span class="code-punctuation">$1</span>');
  
  return code;
}

const highlightedCode = highlightCode(code);
---

<pre class="bg-base-300 p-4 rounded-lg text-sm overflow-x-auto my-4"><code set:html={highlightedCode}></code></pre>